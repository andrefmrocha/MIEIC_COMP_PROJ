import semantics.Symbol;
import semantics.Symbol.Type;

/* Generated By:JJTree: Do not edit this line. ASTArrayAccess.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArrayAccess extends TypeNode {
    public ASTArrayAccess(int id) {
        super(id);
        type = Type.INT;  //TODO: Adapt if String[] is to be used
    }

    public ASTArrayAccess(Parser p, int id) {
        super(p, id);
        type = Type.INT;  //TODO: Adapt if String[] is to be used
    }

    @Override
    public void eval() throws SemanticsException {
        if (this.jjtGetNumChildren() != 2) throw new SemanticsException("Array access require identifier and index");

        SimpleNode arrayName = (SimpleNode) this.jjtGetChild(0);
        SimpleNode indexValue = (SimpleNode) this.jjtGetChild(1);

        checkArrayOperand(arrayName, Type.INT_ARRAY);
        checkArrayOperand(indexValue, Type.INT);
    }

    public void checkArrayOperand(SimpleNode operand, Type type) throws SemanticsException {
        if (operand.id == ParserTreeConstants.JJTIDENTIFIER) {  //Check if the node is a variable
            ASTIdentifier temp = (ASTIdentifier) operand;
            String name = temp.identifierName;
            if (table.checkSymbol(name)) { //And check if the identifier already has a symbol declared
                Symbol leftSymbol = table.getSymbol(name);
                if (type != leftSymbol.getType())
                    throw new SemanticsException("Identifier '" + name + "' is not of type: int array");
            }
        } else if (operand instanceof TypeNode && operand.id != ParserTreeConstants.JJTMETHODCALL) { //TODO: REMOVE METHOD CALL CONDITION
            TypeNode temp = (TypeNode) operand;
            if (type != temp.type) throw new SemanticsException("Expression is not of type: int array");
        } else if (operand.id != ParserTreeConstants.JJTMETHODCALL)
            new SemanticsException("Invalid expression"); //TODO: REMOVE METHOD CALL CONDITION
    }
}
/* JavaCC - OriginalChecksum=07823d6065ca9b37f085148b14d167b9 (do not edit this line) */
