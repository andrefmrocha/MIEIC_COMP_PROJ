package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.Symbol;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTReturn.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTReturn extends TypeNode {
  public Symbol returnSymbol;

  public ASTReturn(int id) {
    super(id);
  }

  public ASTReturn(Javamm p, int id) {
    super(p, id);
  }

  @Override
  public void eval(Javamm parser)  {
    SimpleNode child = (SimpleNode) this.jjtGetChild(0);
    child.setTables(table, methodTable);
    child.eval(parser);
    if(child.id == JavammTreeConstants.JJTIDENTIFIER) {
      ASTIdentifier identifier = ((ASTIdentifier) child);
      this.returnSymbol = this.table.getSymbol(identifier.identifierName);
    } else {
      this.returnSymbol = new Symbol(Symbol.getNodeSymbolType(child)); //TODO does not support statements
    }
  }

  public void evalIdentifiers(Javamm parser) {
    SimpleNode child = (SimpleNode) this.jjtGetChild(0);
    if (!(child instanceof ASTIdentifier)) return;
    String identifierName = ((ASTIdentifier) child).identifierName;
    if(!this.table.checkSymbol(identifierName)) {
      parser.semanticErrors.add(new SemanticsException("Unknown identifier type: " + identifierName, this));
    }
  }

  @Override
  public void write(PrintWriter writer) {
    //TODO implement this or leave blank to not call the default one
  }
}
/* JavaCC - OriginalChecksum=0d7badc8de429fd7f39c8b2723d9a136 (do not edit this line) */
