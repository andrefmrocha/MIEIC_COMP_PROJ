package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.Symbol;
import javamm.semantics.Symbol.Type;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTNewArray.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNewArray extends TypeNode {
    public ASTNewArray(int id) {
        super(id);
        type = Type.INT_ARRAY;
    }

    public ASTNewArray(Javamm p, int id) {
        super(p, id);
        type = Type.INT_ARRAY;
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 1){
            parser.semanticErrors.add(new SemanticsException("New array operation is unary", this));
            return;
        }

        SimpleNode child = (SimpleNode) this.jjtGetChild(0);
        this.evaluateChild(child, new Symbol(Type.INT), parser);
    }

    @Override
    public void write(PrintWriter writer) {
        SimpleNode offset = (SimpleNode) this.jjtGetChild(0);
        offset.write(writer);
        writer.println("  newarray int");
    }
}
/* JavaCC - OriginalChecksum=3a631d25cbdc4e13263745a21c4cb259 (do not edit this line) */
