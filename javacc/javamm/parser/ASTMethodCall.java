package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.ClassSymbol;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTMethodCall.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMethodCall extends TypeNode {

    public ASTMethodCall(int id) {
        super(id);
    }

    public ASTMethodCall(Javamm p, int id) {
        super(p, id);
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 2) {
            parser.semanticErrors.add(new SemanticsException("Wrong number of children found", this));
            return;
        }

        final SimpleNode methodName = (SimpleNode) this.jjtGetChild(0);
        final ASTCall call = ((ASTCall) this.jjtGetChild(1));
        call.setTables(table, methodTable);
        switch (methodName.id) {
            case JavammTreeConstants.JJTIDENTIFIER:
                final String methodIdentifier = ((ASTIdentifier) methodName).identifierName;
                call.evalWithIdentifier(methodIdentifier, false, parser);
                break;
            case JavammTreeConstants.JJTTHIS:
                call.evalWithThis(parser);
                break;
            case JavammTreeConstants.JJTNEW:
                ASTNew astNew = (ASTNew) methodName;
                astNew.setTables(table, methodTable);
                astNew.eval(parser);
                call.evalWithIdentifier(astNew.identifier, true, parser);
                break;
            default:
                parser.semanticErrors.add(new SemanticsException("Found type " + methodName.id + ", not supported", call));
                return;
        }
        this.type = call.type;
    }

    @Override
    public void write(PrintWriter writer) {
        final SimpleNode methodName = (SimpleNode) this.jjtGetChild(0);
        ASTCall method = ((ASTCall) this.jjtGetChild(1));
        switch (methodName.id) {
            case JavammTreeConstants.JJTIDENTIFIER:
            case JavammTreeConstants.JJTNEW:
            case JavammTreeConstants.JJTTHIS:
                if(!method.isStatic) {
                    methodName.setTables(table, methodTable);
                    methodName.write(writer);
                }
                break;
        }
        method.write(writer);
    }
}
/* JavaCC - OriginalChecksum=c431bc197d60321c47680450a6c0622a (do not edit this line) */
