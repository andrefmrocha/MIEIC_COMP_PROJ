package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.StackUsage;
import javamm.semantics.Symbol;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTLength.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTLength extends TypeNode {
    public ASTLength(int id) {
        super(id);
        type = Symbol.Type.INT;
    }

    public ASTLength(Javamm p, int id) {
        super(p, id);
        type = Symbol.Type.INT;
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 1)
            parser.semanticErrors.add(new SemanticsException("Wrong number of children found", this));


        final SimpleNode var = (SimpleNode) this.jjtGetChild(0);
        // handle different ways of calling .length
        switch (var.id) {
            case JavammTreeConstants.JJTIDENTIFIER:
                // check identifier exists
                final ASTIdentifier identifier = (ASTIdentifier) var;
                if (!this.table.checkSymbol(identifier.identifierName)) {
                    parser.semanticErrors.add(new SemanticsException("No variable " + identifier.identifierName
                            + " was found", var));
                    return;
                }

                // check symbol is an INT_ARRAY
                final Symbol symbol = table.getSymbol(identifier.identifierName);
                if (!this.checkType(Symbol.Type.INT_ARRAY, symbol)) {
                    parser.semanticErrors.add(new SemanticsException("Variable " + identifier.identifierName
                            + " is not an int array", var));
                    return;
                }
                break;

            case JavammTreeConstants.JJTMETHODCALL:
                final ASTMethodCall call = (ASTMethodCall) var;
                call.eval(parser);

                if (call.type != Symbol.Type.INT_ARRAY) {
                    parser.semanticErrors.add(new SemanticsException("Method call not does return int array", call));
                    return;
                }

                break;

            default:
                parser.semanticErrors.add(new SemanticsException("No valid array provided for length call", var));

        }
    }

    @Override
    public void write(PrintWriter writer) {
        final SimpleNode var = (SimpleNode) this.jjtGetChild(0);
        var.setTables(table, methodTable);
        var.write(writer);
        writer.println("  arraylength");
    }

    @Override
    protected void calculateStackUsage(StackUsage stackUsage) {
        final SimpleNode var = (SimpleNode) this.jjtGetChild(0);
        var.calculateStackUsage(stackUsage);
    }
}
/* JavaCC - OriginalChecksum=d20841b9a326e3b2ada1a7a0c3a4a9a1 (do not edit this line) */
