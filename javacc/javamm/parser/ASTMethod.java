package javamm.parser;

import javamm.SemanticsException;

/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMethod extends TypeNode {
    public ASTMethod(int id) {
        super(id);
    }

    public ASTMethod(Javamm p, int id) {
        super(p, id);
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 2 && this.jjtGetNumChildren() != 3){
            parser.semanticErrors.add(new SemanticsException("Lacks the number of required children!", this));
            return;
        }
        SimpleNode methodType = (SimpleNode) this.jjtGetChild(0);
        SimpleNode parameters;

        if (this.jjtGetNumChildren() == 2) {
            parameters = null;
        } else {
            parameters = (SimpleNode) this.jjtGetChild(1);
        }

        if (methodType.id == JavammTreeConstants.JJTMETHODNAME) {
            methodType.setTables(table, methodTable);
            ASTMethodName method = (ASTMethodName) methodType;
            method.eval(parameters);
            this.type = method.returnType;
        } else if (methodType.id == JavammTreeConstants.JJTMAIN) {
            methodType.setTables(table, methodTable);
            methodType.eval(parser);
        } else {
            parser.semanticErrors.add(new SemanticsException("Wrong method type was found", methodType));
        }
    }

    public void processBody(Javamm parser) {
        ASTMethodBody methodBody;

        if (this.jjtGetNumChildren() == 2) {
            methodBody = (ASTMethodBody) this.jjtGetChild(1);
        } else {
            methodBody = (ASTMethodBody) this.jjtGetChild(2);
        }
        methodBody.returnValue = this.type;
        methodBody.setTables(table, methodTable);
        methodBody.eval(parser);
    }
}
/* JavaCC - OriginalChecksum=e01bdf01dd9e8aa606ef225a59a26df3 (do not edit this line) */
