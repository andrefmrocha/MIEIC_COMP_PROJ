package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.Symbol;
import javamm.semantics.Symbol.Type;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTNegation.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNegation extends TypeNode {
    public ASTNegation(int id) {
        super(id);
        type = Type.BOOL;
    }

    public ASTNegation(Javamm p, int id) {
        super(p, id);
        type = Type.BOOL;
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 1){
            parser.semanticErrors.add(new SemanticsException("Negation is a unary operation", this));
            return;
        }

        SimpleNode child = (SimpleNode) this.jjtGetChild(0);
        this.evaluateChild(child, new Symbol(type), parser);
    }

    @Override
    public void write(PrintWriter writer) {
        //TODO implement this or leave blank to not call the default one
    }
}
/* JavaCC - OriginalChecksum=13de953db4e66e1048f234f837f24db4 (do not edit this line) */
