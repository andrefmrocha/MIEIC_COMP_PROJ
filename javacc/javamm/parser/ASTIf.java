package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.Symbol;

import java.io.PrintWriter;
import java.util.*;

/* Generated By:JJTree: Do not edit this line. ASTIf.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIf extends ConditionalNode {
    public ASTIf(int id) {
        super(id);
    }

    public ASTIf(Javamm p, int id) {
        super(p, id);
    }

    @Override
    public void eval(Javamm parser) {
        super.eval(parser);
        ASTThen thenNode = ((ASTThen) this.jjtGetChild(1));
        thenNode.setTables(table, methodTable);
        ASTElse elseNode = ((ASTElse) this.jjtGetChild(2));
        elseNode.setTables(table, methodTable);
        final List<String> thenInitializedVars = thenNode.evaluate(parser);
        final List<String> elseInitializedVars = elseNode.evaluate(parser);

        final Set<String> uninitializedElseVars = new HashSet<>(thenInitializedVars);
        uninitializedElseVars.removeAll(elseInitializedVars);
        if (uninitializedElseVars.size() > 0) {
            for (String identifier : uninitializedElseVars) {
                parser.semanticWarnings.add(new SemanticsException(identifier + " is not initialized in else", elseNode));
            }
        }

        final Set<String> uninitializedThenVars = new HashSet<>(elseInitializedVars);
        uninitializedThenVars.removeAll(thenInitializedVars);
        if (uninitializedThenVars.size() > 0) {
            for (String identifier : uninitializedThenVars) {
                parser.semanticWarnings.add(new SemanticsException(identifier + " is not initialized in then", elseNode));
            }
        }

    }

    @Override
    public void write(PrintWriter writer) {
        //TODO implement this or leave blank to not call the default one
    }
}
/* JavaCC - OriginalChecksum=3f17c4ed5b4fd5cc052c1c2d168b79b9 (do not edit this line) */
