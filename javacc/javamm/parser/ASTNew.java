package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.ClassSymbol;
import javamm.semantics.Symbol;
import javamm.semantics.Symbol.Type;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTNew.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNew extends TypeNode {
    public ClassSymbol classSymbol;
    public String identifier;

    public ASTNew(int id) {
        super(id);
        type = Type.CLASS;
    }

    public ASTNew(Javamm p, int id) {
        super(p, id);
        type = Type.CLASS;
    }

    @Override
    public void eval(Javamm parser) {
        if (this.jjtGetNumChildren() != 1) {
            parser.semanticErrors.add(new SemanticsException("New operation is unary", this));
            return;
        }

        SimpleNode child = (SimpleNode) this.jjtGetChild(0);
        this.evaluateChild(child, new Symbol(type), parser);

        ASTIdentifier identifier = (ASTIdentifier) child;
        classSymbol = (ClassSymbol) table.getSymbol(identifier.identifierName);
        this.identifier = identifier.identifierName;
    }

    @Override
    public void write(PrintWriter writer) {
        writer.println("new " + identifier); // create new reference
        writer.println("dup"); //duplicate object on top of stack, need 2 references (1 constructor + 1 assign)
        writer.println("invokespecial " + identifier + "/<init>()V"); // call constructor
    }
}
/* JavaCC - OriginalChecksum=c6d588009442d8c81f835326710afcd3 (do not edit this line) */
