/* Generated By:JJTree: Do not edit this line. ASTMain.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.ClassSymbol;
import javamm.semantics.MethodSymbol;
import javamm.semantics.Symbol;

import java.util.ArrayList;
import java.util.List;
import java.io.PrintWriter;

public
class ASTMain extends SimpleNode {
  public ASTMain(int id) {
    super(id);
  }

  public ASTMain(Javamm p, int id) {
    super(p, id);
  }

  @Override
  public void eval(Javamm parser)  {
    List<Symbol> parametersTypes =  new ArrayList<>();

    if(this.table.getParent().getSymbol("main") != null){
      parser.semanticErrors.add(new SemanticsException("Main is already defined in this class!", this));
      return;
    }

    SimpleNode child = (SimpleNode) this.jjtGetChild(0);
    if(child.id != JavammTreeConstants.JJTIDENTIFIER){
      parser.semanticErrors.add(new SemanticsException("Invalid child to body!", child));
      return;
    }
    else
    {
      ASTIdentifier identifier = (ASTIdentifier) child;
      this.table.putSymbol(identifier.identifierName, new ClassSymbol(identifier.identifierName));
    }

    parametersTypes.add(new Symbol(Symbol.Type.CLASS));
    this.table.getParent().putSymbol("main",new MethodSymbol(new Symbol(Symbol.Type.MAIN),parametersTypes));
  }

  @Override
  public void write(PrintWriter writer) {
    //TODO implement this or leave blank to not call the default one
  }

}
/* JavaCC - OriginalChecksum=17a049ee7f925ec198e1d6ad72a5fcc9 (do not edit this line) */
