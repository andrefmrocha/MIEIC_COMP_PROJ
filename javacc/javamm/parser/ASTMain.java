/* Generated By:JJTree: Do not edit this line. ASTMain.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.ClassSymbol;
import javamm.semantics.MethodSymbol;
import javamm.semantics.Symbol;

import java.util.ArrayList;
import java.util.List;

public
class ASTMain extends SimpleNode {
  public ASTMain(int id) {
    super(id);
  }

  public ASTMain(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    List<Symbol.Type> parametersTypes =  new ArrayList<>();

    if(this.table.getParent().getSymbol("main") != null)
      throw new SemanticsException("Main is already defined in this class!");

    SimpleNode child = (SimpleNode) this.jjtGetChild(0);
    if(child.id != ParserTreeConstants.JJTIDENTIFIER)
      throw new SemanticsException("Invalid child to body!");
    else
    {
      ASTIdentifier identifier = (ASTIdentifier) child;
      this.table.putSymbol(identifier.identifierName, new ClassSymbol(identifier.identifierName));
    }

    parametersTypes.add(Symbol.Type.CLASS);
    this.table.getParent().putSymbol("main",new MethodSymbol(Symbol.Type.MAIN,parametersTypes));
  }

}
/* JavaCC - OriginalChecksum=17a049ee7f925ec198e1d6ad72a5fcc9 (do not edit this line) */
