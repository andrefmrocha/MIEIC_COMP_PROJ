/* Generated By:JJTree: Do not edit this line. ASTCallParams.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javamm.parser;

import javamm.SemanticsException;
import javamm.semantics.MethodIdentifier;
import javamm.semantics.StackUsage;
import javamm.semantics.Symbol;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public
class ASTCallParams extends SimpleNode {
    public int nParams;

    public ASTCallParams(int id) {
        super(id);
    }

    public ASTCallParams(Javamm p, int id) {
        super(p, id);
    }

    public MethodIdentifier getMethodIdentifier(String identifier, Javamm parser) {
        final List<Symbol> params = new ArrayList<>();
        for (int i = 0; i < this.jjtGetNumChildren(); i++) {
            SimpleNode node = (SimpleNode) this.jjtGetChild(i);
            node.setTables(table, methodTable);
            if (node.id == JavammTreeConstants.JJTIDENTIFIER) {
                final ASTIdentifier identifierNode = (ASTIdentifier) node;
                if (!table.checkSymbol(identifierNode.identifierName)) {
                    parser.semanticErrors.add(new SemanticsException("No variable named " + identifierNode.identifierName + " found", node));
                    return null;
                }
                params.add(table.getSymbol(identifierNode.identifierName));

            } else if(node.id == JavammTreeConstants.JJTNEW){
                ASTNew astNew = (ASTNew) node;
                astNew.setTables(table, methodTable);
                astNew.eval(parser);
                params.add(astNew.classSymbol);
            } else if (node instanceof TypeNode) {
                TypeNode typeNode = (TypeNode) node;
                typeNode.setTables(table, methodTable);
                typeNode.eval(parser);
                params.add(new Symbol(typeNode.type));
            } else
                params.add(new Symbol(VarNode.getType(node, table, parser)));

        }
        nParams = params.size();
        return new MethodIdentifier(identifier, params);
    }

    @Override
    public String toString() {
        return "CallParams";
    }

    @Override
    protected void calculateStackUsage(StackUsage stackUsage) {
        super.calculateStackUsage(stackUsage);
    }
}
/* JavaCC - OriginalChecksum=4d38201678fd4fcffee01a18a99da450 (do not edit this line) */
