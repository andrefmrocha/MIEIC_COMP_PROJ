package javamm.parser;

import java.io.PrintWriter;

/* Generated By:JJTree: Do not edit this line. ASTWhile.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTWhile extends ConditionalNode {

  protected int n = 0;
  public ASTWhile(int id) {
    super(id);
  }

  public ASTWhile(Javamm p, int id) {
    super(p, id);
  }

  @Override
  public void eval(Javamm parser) {
    super.eval(parser);
    for (int i = 1; i < this.jjtGetNumChildren(); i++) {
      SimpleNode child = (SimpleNode) this.jjtGetChild(i);
      child.setTables(table, methodTable);
      child.eval(parser);
    }
  }

  @Override
  public void write(PrintWriter writer) {

    writer.println("while_" + n + ":");
    SimpleNode expression = (SimpleNode) this.jjtGetChild(0);
    switch (expression.id) {
      case JavammTreeConstants.JJTAND:
        ASTAnd andExp = (ASTAnd) expression;
        andExp.write(writer,"endwhile_" );
        break;
      case JavammTreeConstants.JJTIDENTIFIER:
        ASTIdentifier varExp = (ASTIdentifier) expression;
        varExp.write(writer);
        writer.println("  ifeq endwhile_" + n );
        break;
      case JavammTreeConstants.JJTBOOLEANVALUE:
      case JavammTreeConstants.JJTNEGATION:
        TypeNode boolExp = (TypeNode) expression;
        boolExp.write(writer);
        writer.println("  ifne endwhile_" + n );
        break;
      case JavammTreeConstants.JJTLESSTHAN:
        ASTLessThan lsThanExp = (ASTLessThan) expression;
        lsThanExp.write(writer, "endwhile_" + n );
        break;
      default:
        return;
    }

    for(int i = 1; i < this.jjtGetNumChildren(); i++) {
      SimpleNode exp = (SimpleNode) this.jjtGetChild(i);
      exp.write(writer);
    }

    writer.println("  goto " + "while_" + n );
    writer.println("  endwhile_" + n + ":" + "\n");
  }

}
/* JavaCC - OriginalChecksum=5f4455af0142b2fe9a424f1a313045fd (do not edit this line) */
