/* Generated By:JJTree: Do not edit this line. ASTMethodName.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_Javamm=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javamm.parser;

import javamm.semantics.MethodIdentifier;
import javamm.semantics.MethodSymbol;
import javamm.semantics.Symbol;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public
class ASTMethodName extends SimpleNode {
    public Symbol.Type returnType = null;
    public String methodName;
    public List<Symbol> parameters = new ArrayList<>();

    public ASTMethodName(int id) {
        super(id);
    }

    public ASTMethodName(Javamm p, int id) {
        super(p, id);
    }

    public void eval(Javamm parser, SimpleNode parameters) {
        ASTIdentifier nameNode = (ASTIdentifier) this.jjtGetChild(1);
        SimpleNode typeNode = (SimpleNode) this.jjtGetChild(0);
        methodName = nameNode.identifierName;
        Symbol returnSymbol = VarNode.getSymbol(typeNode, table, parser);

        if (parameters != null) {
            parameters.setTables(table, methodTable);
            parameters.eval(parser);
            for (int i = 0; i < parameters.jjtGetNumChildren(); i += 2) {

                VarNode parameter = new VarNode(i, parameters.jjtGetChild(i), parameters.jjtGetChild(i + 1),
                        table, true, i / 2);
                parameter.eval(parser);
                this.parameters.add(parameter.getSymbol());
            }
        }
        this.methodTable.putSymbol(new MethodIdentifier(methodName, this.parameters), new MethodSymbol(returnSymbol, this.parameters));
        this.returnType = returnSymbol.getType();
    }

    @Override
    public void write(PrintWriter writer) {
        writer.print(".method public " + methodName + "(");
        for (Symbol symbol: parameters) {
            writer.print(Symbol.getJVMTypeByType(symbol.getType()));
        }
        writer.println(")" + Symbol.getJVMTypeByType(returnType));
    }
}
/* JavaCC - OriginalChecksum=4573a3da8b3ef87c2c4dda84d8669778 (do not edit this line) */
