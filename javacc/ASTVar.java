/* Generated By:JJTree: Do not edit this line. ASTVar.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import semantics.Symbol;

public
class ASTVar extends SimpleNode {
  public ASTVar(int id) {
    super(id);
  }

  public ASTVar(Parser p, int id) {
    super(p, id);
  }

  public void eval() throws SemanticsException {
    if(this.jjtGetNumChildren() != 2) throw new SemanticsException("Variable declaration must have type and identifier");

    SimpleNode typeNode = (SimpleNode) this.jjtGetChild(0);
    SimpleNode identifier = (SimpleNode) this.jjtGetChild(1);

    String name = null;
    if(identifier instanceof ASTIdentifier) {
      ASTIdentifier temp = (ASTIdentifier) identifier;
      name = temp.identifierName;
    } else  throw new SemanticsException("Variable has not a valid identifier");

    if(this.table.checkSymbol(name))
      throw new SemanticsException("Symbol already exists with name: " + name);

    Symbol.Type type;
      switch (typeNode.id) {
        case ParserTreeConstants.JJTINTARRAY:
          type = Symbol.Type.INT_ARRAY;
          break;
        case ParserTreeConstants.JJTINT:
          type = Symbol.Type.INT;
          break;
        case ParserTreeConstants.JJTBOOLEAN:
          type = Symbol.Type.BOOL;
          break;
        case ParserTreeConstants.JJTVOID:
          type = Symbol.Type.VOID;
          break;
        case ParserTreeConstants.JJTIDENTIFIER:
          type = Symbol.Type.OBJ;
          break;
        default:
          throw new SemanticsException("Error type in variable");
      }

    Symbol varSym = new Symbol(type); //TODO: get parameter value
    this.table.addSymbol(name, varSym);
  }
}
/* JavaCC - OriginalChecksum=d3558354610a208fcf13fa1f04295551 (do not edit this line) */
