import semantics.Symbol;
import semantics.SymbolTable;

/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMethod extends TypeNode {
  public ASTMethod(int id) {
    super(id);
  }

  public ASTMethod(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    if (this.jjtGetNumChildren() != 2 && this.jjtGetNumChildren() != 3) throw new SemanticsException("Lacks the number of required children!");
    SimpleNode methodType = (SimpleNode) this.jjtGetChild(0);
    SimpleNode parameters;
    SimpleNode methodBody;

    if(this.jjtGetNumChildren() == 2) {
      parameters = null;
      methodBody = (SimpleNode) this.jjtGetChild(1);
    } else {
      parameters = (SimpleNode) this.jjtGetChild(1);
      methodBody = (SimpleNode) this.jjtGetChild(2);
    }
    //TODO: class must set the table of the method instead of using this

    if (methodType.id == ParserTreeConstants.JJTMETHODNAME){
      ASTIdentifier temp = (ASTIdentifier) methodType;
      String name = temp.identifierName;
      Symbol methodname = new Symbol(Symbol.Type.OBJ);
      this.table.putSymbol(name,methodname);

      if(parameters != null) {
        parameters.setTable(this.table);
        parameters.eval();
      }

      List<Type>parameters_types;
      for(int i = 0; i< parameters.jjtGetNumChildren(); i++)
      {
        SimpleNode child = (SimpleNode) this.jjtGetChild(i);
        //add type of parameter to list
        //add list to symbol method
        //add symbol method to table
      }
    } else if(methodType.id == ParserTreeConstants.JJTMAIN) {
      if(this.table.getSymbol("main") != null)
        throw new SemanticsException("Main is already defined!");
        this.table.putSymbol("main", new Symbol(Symbol.Type.VOID));
        methodType.setTable(new SymbolTable());
        methodType.eval();
    } else {
      throw new SemanticsException("Wrong method type was found");
    }

    if(methodBody.id != ParserTreeConstants.JJTMETHODBODY)
    {
      throw new SemanticsException("No method body found!");
    }
    else {
      methodBody.setTable(new SymbolTable());
      methodBody.eval();
    }

  }
}
/* JavaCC - OriginalChecksum=e01bdf01dd9e8aa606ef225a59a26df3 (do not edit this line) */
