/* Generated By:JJTree: Do not edit this line. ASTParameter.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import semantics.Symbol;

public
class ASTParameter extends SimpleNode {
  public ASTParameter(int id) {
    super(id);
  }

  public ASTParameter(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    if(this.jjtGetNumChildren() != 2) throw new SemanticsException("Invalid parameter");
    SimpleNode typeNode = (SimpleNode) this.jjtGetChild(0);
    SimpleNode identifier = (SimpleNode) this.jjtGetChild(1);

    String name;
    if(identifier instanceof ASTIdentifier) {
      ASTIdentifier temp = (ASTIdentifier) identifier;
      name = temp.identifierName;
    } else throw new SemanticsException("Parameter has not a valid identifier");

    if(table.checkSymbol(name)) throw new SemanticsException("Parameter has been defined previously");

    Symbol.Type type;
    switch (typeNode.id) {
      case ParserTreeConstants.JJTINTARRAY:
        type = Symbol.Type.INT_ARRAY;
        break;
      case ParserTreeConstants.JJTINT:
        type = Symbol.Type.INT;
        break;
      case ParserTreeConstants.JJTBOOLEAN:
        type = Symbol.Type.BOOL;
        break;
      case ParserTreeConstants.JJTVOID:
        type = Symbol.Type.VOID;
        break;
      case ParserTreeConstants.JJTIDENTIFIER:
        type = Symbol.Type.OBJ;
        break;
      default:
        throw new SemanticsException("Error type in parameter");
    }

    //Symbol parameterSym = new Symbol(type,"",true); //TODO: get parameter value
    //table.addSymbol(parameterSym);

  }


}
/* JavaCC - OriginalChecksum=e96532e25d51b402d9cc0b48c0171793 (do not edit this line) */
