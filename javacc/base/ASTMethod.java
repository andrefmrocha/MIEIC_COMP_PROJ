package base;

import base.semantics.SymbolTable;

/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMethod extends TypeNode {
  public ASTMethod(int id) {
    super(id);
  }

  public ASTMethod(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    if (this.jjtGetNumChildren() != 2 && this.jjtGetNumChildren() != 3) throw new SemanticsException("Lacks the number of required children!");
    SimpleNode methodType = (SimpleNode) this.jjtGetChild(0);
    SimpleNode parameters;
    SimpleNode methodBody;

    if(this.jjtGetNumChildren() == 2) {
      parameters = null;
      methodBody = (SimpleNode) this.jjtGetChild(1);
    } else {
      parameters = (SimpleNode) this.jjtGetChild(1);
      methodBody = (SimpleNode) this.jjtGetChild(2);
    }
    //TODO: class must set the table of the method instead of using this
    final SymbolTable newTable = new SymbolTable();
    this.setTable(newTable);

    if (methodType.id == ParserTreeConstants.JJTMETHODNAME){
      //TODO: add method symbol to parent symbol table
      //TODO: set method type

      if(parameters != null) {
        parameters.setTable(newTable);
        parameters.eval();
      }
    } else if(methodType.id == ParserTreeConstants.JJTMAIN) {
      //TODO: make sure that only one definition of the main exists
      //TODO: identifier only
      parameters = (SimpleNode) methodType.jjtGetChild(0);
    } else {
      throw new SemanticsException("Wrong method type was found");
    }

    if(methodBody.id != ParserTreeConstants.JJTMETHODBODY)
      throw new SemanticsException("No method body found!");
    methodBody.setTable(newTable);
    methodBody.eval();

  }
}
/* JavaCC - OriginalChecksum=e01bdf01dd9e8aa606ef225a59a26df3 (do not edit this line) */
