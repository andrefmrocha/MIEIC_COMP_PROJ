/* Generated By:JJTree: Do not edit this line. ASTCall.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package base;

import base.semantics.MethodSymbol;
import base.semantics.Symbol;

public
class ASTCall extends TypeNode {
    public ASTCall(int id) {
        super(id);
    }

    public ASTCall(Parser p, int id) {
        super(p, id);
    }

    public void evalWithIdentifier(String identifier) throws SemanticsException {
        final ASTIdentifier methodIdentifier = (ASTIdentifier) this.jjtGetChild(0);
        if (table.checkSymbol(identifier)) {
            final Symbol symbol = table.getSymbol(identifier);
            if (symbol.getType() != Symbol.Type.OBJ)
                throw new SemanticsException(identifier + " is not an object");
            //TODO: Check if class has that method and the respective call
        } else if (table.checkSymbol(identifier + "." + methodIdentifier)) {
            final MethodSymbol symbol = (MethodSymbol) table.getSymbol(identifier + "." + methodIdentifier);
            if (symbol.getParameters().size() != this.jjtGetNumChildren() - 1)
                throw new SemanticsException("Method expected " +
                        symbol.getParameters().size() + " parameters, got " + (this.jjtGetNumChildren() - 1));

            for(int i = 0; i < symbol.getParameters().size(); i++)
                this.evaluateChild((SimpleNode) this.jjtGetChild(i + 1), symbol.getParameters().get(i));

            this.type = symbol.getType();
        } else
            throw new SemanticsException(identifier + " was not found");
    }

    public void evalWithThis() throws SemanticsException {
        //TODO: Get from the symbol table the method name
    }

}
/* JavaCC - OriginalChecksum=9dd75f9d47df5bc95ebf7e6f50766bb0 (do not edit this line) */
