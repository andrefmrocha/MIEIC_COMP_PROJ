package base;

import base.semantics.Symbol;

/* Generated By:JJTree: Do not edit this line. ASTMethodCall.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMethodCall extends TypeNode {
    public ASTMethodCall(int id) {
        super(id);
    }

    public ASTMethodCall(Parser p, int id) {
        super(p, id);
    }

    @Override
    public void eval() throws SemanticsException {
        if (this.jjtGetNumChildren() != 2) throw new SemanticsException("Wrong number of children found");

        final SimpleNode methodName = (SimpleNode) this.jjtGetChild(0);
        final SimpleNode methodCall = (SimpleNode) this.jjtGetChild(0);
        if (methodName.id != ParserTreeConstants.JJTIDENTIFIER)
            throw new SemanticsException("No identifier provided for method call");

        final String methodIdentifier = ((ASTIdentifier) methodName).identifierName;
        if (!this.table.checkSymbol(methodIdentifier))
            throw new SemanticsException("No method called " + methodIdentifier + " was found");

        final Symbol methodSymbol = table.getSymbol(methodIdentifier);
        if (methodSymbol.getType() != Symbol.Type.METHOD)
            throw new SemanticsException(methodIdentifier + " is not a method");

        //TODO: Get Method's return type


    }
}
/* JavaCC - OriginalChecksum=c431bc197d60321c47680450a6c0622a (do not edit this line) */
