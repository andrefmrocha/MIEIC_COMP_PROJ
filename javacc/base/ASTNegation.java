package base;

import base.semantics.Symbol;
import base.semantics.Symbol.Type;

/* Generated By:JJTree: Do not edit this line. ASTNegation.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNegation extends TypeNode {
    public ASTNegation(int id) {
        super(id);
        type = Type.BOOL;
    }

    public ASTNegation(Parser p, int id) {
        super(p, id);
        type = Type.BOOL;
    }

    @Override
    public void eval() throws SemanticsException {
        if (this.jjtGetNumChildren() != 1) throw new SemanticsException("Negation is a unary operation");

        SimpleNode child = (SimpleNode) this.jjtGetChild(0);
        this.evaluateChild(child, new Symbol(type));
    }
}
/* JavaCC - OriginalChecksum=13de953db4e66e1048f234f837f24db4 (do not edit this line) */
