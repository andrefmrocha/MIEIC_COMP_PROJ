package base;

import base.semantics.SymbolTable;
import base.semantics.Symbol;

/* Generated By:JJTree: Do not edit this line. ASTClass.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTClass extends SimpleNode {
  public ASTClass(int id) {
    super(id);
  }

  public ASTClass(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    final SymbolTable newTable = new SymbolTable(methodTable);

    for(int i = 0; i < this.jjtGetNumChildren(); i++)
    {
      SimpleNode child = (SimpleNode) this.jjtGetChild(i);

      switch(child.id)
      {
        case ParserTreeConstants.JJTVAR:
          child.setTables(table, newTable);
          child.eval();
          break;
        case ParserTreeConstants.JJTEXTEND:
          child.setTables(table, newTable);
          //child.eval();
          //TODO: solve problem in imports
          break;
        case ParserTreeConstants.JJTIDENTIFIER:
          ASTIdentifier temp = (ASTIdentifier) child;
          String name = temp.identifierName;
          Symbol identifier = new Symbol(Symbol.Type.OBJ);
          this.table.putSymbol(name,identifier);
          child.setTables(table, newTable);
          child.eval();
          break;
        case ParserTreeConstants.JJTMETHOD:
          child.setTables(new SymbolTable(table), newTable);
          child.eval();
          break;
        default:
          throw new SemanticsException("Incorrect child node.");
      }
    }
    for(int i = 0; i < this.jjtGetNumChildren(); i++) {
      SimpleNode child = (SimpleNode) this.jjtGetChild(i);
      if (child.id == ParserTreeConstants.JJTMETHOD) {
        ASTMethod method = (ASTMethod) child;
        method.processBody();
      }
    }
  }
}
/* JavaCC - OriginalChecksum=f92e5600b4d1b54c8cf65f0fa9dc9373 (do not edit this line) */
