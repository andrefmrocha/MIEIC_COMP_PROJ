package base;

import base.semantics.SymbolTable;

/* Generated By:JJTree: Do not edit this line. ASTClass.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTClass extends SimpleNode {
  public ASTClass(int id) {
    super(id);
  }

  public ASTClass(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws SemanticsException {
    final SymbolTable newTable = new SymbolTable();

    for(int i = 0; i < this.jjtGetNumChildren(); i++)
    {
      SimpleNode child = (SimpleNode) this.jjtGetChild(i);

      if(child.id == ParserTreeConstants.JJTVAR ||child.id == ParserTreeConstants.JJTEXTEND  || child.id == ParserTreeConstants.JJTIDENTIFIER)
      {
        child.setTable(newTable);
        child.eval();
      }
      else if(child.id == ParserTreeConstants.JJTMETHOD)
      {
        SymbolTable MethodTable = new SymbolTable(newTable);
        child.setTable(MethodTable);
        child.eval();
      }
      else {
        throw new SemanticsException("Incorrect child node.");
      }
    }
  }
}
/* JavaCC - OriginalChecksum=f92e5600b4d1b54c8cf65f0fa9dc9373 (do not edit this line) */
