/* Generated By:JJTree: Do not edit this line. ASTMethodName.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package base;

import base.semantics.MethodSymbol;
import base.semantics.Symbol;

import java.util.ArrayList;
import java.util.List;

public
class ASTMethodName extends SimpleNode {
  public ASTMethodName(int id) {
    super(id);
  }

  public ASTMethodName(Parser p, int id) {
    super(p, id);
  }

  public void eval(SimpleNode parameters) throws SemanticsException {
    String method_name = null;
    Symbol.Type type = null;
    List<Symbol.Type> parameters_types =  new ArrayList<>();

    ASTIdentifier namenode = (ASTIdentifier) this.jjtGetChild(1);
    SimpleNode typenode = (SimpleNode) this.jjtGetChild(0);
    method_name = namenode.identifierName;
    type = VarNode.getType(typenode.id);

    if(parameters != null) {
      parameters.setTable(this.table);
      for(int i = 0; i < parameters.jjtGetNumChildren(); i+=2) {
        VarNode parameter = new VarNode(i,parameters.jjtGetChild(i),parameters.jjtGetChild(i+1),table);
        parameter.eval();
        parameters_types.add(parameter.getType(parameters.jjtGetChild(i).getId()));
      }
    }
    this.table.getParent().putSymbol(method_name,new MethodSymbol(type,parameters_types));
  }

}
/* JavaCC - OriginalChecksum=4573a3da8b3ef87c2c4dda84d8669778 (do not edit this line) */
