options {
    LOOKAHEAD =  1;
    MULTI = true;
}

PARSER_BEGIN(Parser)

public class Parser {

    public static void main(String[] args) throws ParseException {
            Parser parser = new Parser(System.in);
            parser.Program();
    }
}
PARSER_END(Parser)

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < LF: ";" >
    | <IMPORT: "import">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <RETURN: "return">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <TRUE: "true">
    | <FALSE: "false">
    | <NEW: "new">
    | <LENGTH: "length">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IDENTIFIER: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a" - "z", "_"])* >
}

SimpleNode Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}


void ImportDeclaration() #void : {}
{
    (<IMPORT> ImportStatement() ";")*
}

void ImportStatement() #void : {}
{
    <IDENTIFIER> ("." <IDENTIFIER>)* "(" Type() ")"
}


void ClassDeclaration() #void : {}
{
    <CLASS> <IDENTIFIER>  [<EXTENDS> <IDENTIFIER> ]  "{"VarDeclaration() (MethodDeclaration())* "}"
}

void VarDeclaration() #void : {}
{
   Type() <IDENTIFIER> [ VarDeclaration() ] ";"
}

void MethodDeclaration() #void : {}
{
    <PUBLIC>
    (Type() <IDENTIFIER> "(" [Type() <IDENTIFIER> ("," Type() <IDENTIFIER>)*] ")" "{" VarDeclaration() (Statement())* <RETURN> Stuff() ";" "}"
    | (<STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" <IDENTIFIER> ")" "{" VarDeclaration() (Statement())* "}")) //TODO: check if newly added production is correct

}

void Statement() #void : {}
{
    "{" (Statement())* "}"
    | <IF> "(" Expression() ")" Statement() <ELSE> Statement()
    | <WHILE> "(" Expression() ")" Statement()
    //| <IDENTIFIER> (("=" Expression() ) | ("[" Expression() "]" "=" Expression() ) ) ";"
    | <IDENTIFIER> ["[" Expression() "]"] "=" Expression() ";" //TODO: verify if this production is acceptable
    | Expression() ";"
}

void Stuff() : { Token t; }
{
     ("&&"|"<"|"+"|"-"|"*"|"/") Expression() Stuff()
    | "[" Expression() #ArrayAccess "]" Stuff()
    |"." ( <LENGTH> | (t=<IDENTIFIER> "(" [ Expression() ("," Expression() )* ] ")") { jjtThis.methodIdentifier = t.image; }#MethodCall  ) Stuff()
}

void Expression() : { Token t; }{
    t=<INTEGER>{ jjtThis.number = Integer.parseInt(t.image); } #Numeric Stuff()
    | <TRUE> { jjtThis.number = 1; } #Numeric Stuff()
    | <FALSE> { jjtThis.number = 0; } #Numeric Stuff()
    | <NEW> (t= <IDENTIFIER>  { jjtThis.classIdentifier = t.image; }#New  "()" |
     <INT> "[" Expression() "]" #NewArray ) Stuff()
    | "!" #Negation Expression() Stuff()
    | "(" Expression() ")" Stuff()
}

void Type() : {} //TODO: Type no longer a Token
{
      <INT>["[]"] | <BOOLEAN> | <IDENTIFIER>
}

void NewType() : {} //TODO: Type no longer a Token
{
      <INT>["[]"] | <BOOLEAN>
}