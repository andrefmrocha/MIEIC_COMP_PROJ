options {
    LOOKAHEAD =  1;
    MULTI = true;
}

PARSER_BEGIN(Parser)

public class Parser {

    int nErrors = 1;

    public static void main(String[] args) throws ParseException {
            Parser parser = new Parser(System.in);
            parser.Program();
    }
}
PARSER_END(Parser)

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

SKIP :
{
  < "//" (~["\r", "\n"])* >
| "/*" : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  "*/" : DEFAULT
| < ~[] >
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | <IMPORT: "import">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <RETURN: "return">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <LENGTH: "length">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IDENTIFIER: ["A"-"Z", "a"-"z", "_", "$"](["0"-"9", "A"-"Z", "a" - "z", "_"])* >
    | <LFTSQRBRCKT : "[">
    | <RGHTSQRBRCKT : "]">
    | <RGHTBRCKT : ")">
    | <LFTBRCKT : "(">
    | <LFTCRLBRCKT : "{">
    | <RGHTCRLBRCKT : "}">
    | <SEMICOLON : ";">
    | <DOT : ".">
    | <COMMA : ",">
    | <EXCLAMATION: "!">
    | <EQUALS : "=">
}

SimpleNode Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}


void ImportDeclaration() #void : {}
{
    (<IMPORT> ImportStatement() <SEMICOLON> )*
}

void ImportStatement() #void : {  }
{
    (  [<STATIC>]#Static Identifier()  (<DOT> Identifier() )* [(<LFTBRCKT>  Type() (<COMMA> Type())* <RGHTBRCKT> | "()") Type()] #Return ) #Import
}

void Identifier() #void : {Token t;}
{
    t = <IDENTIFIER> {jjtThis.identifierName = t.image;} #Identifier

}

void ClassDeclaration() #void : {}
{
    (<CLASS> Identifier()   [<EXTENDS> Identifier() #Extend ]  <LFTCRLBRCKT> (VarDeclaration())* (MethodDeclaration())* <RGHTCRLBRCKT>) #Class
}

void DeclarationFragment() #void : {}
{
   Identifier() <SEMICOLON> #Var(2)
}


void VarDeclaration() #void : {}
{
   Type() DeclarationFragment()
}

void NonTypeVarDeclaration() #void : {}
{
   NonIdentifierType() DeclarationFragment()
}

void MethodBody() #void : {} {

    NonTypeVarDeclaration() MethodBody()
    |
    Identifier() ( DeclarationFragment() MethodBody() | IdentifierStatementFragment() ( Statement() )* )
    |
    NonIdentifierStatement() (Statement())*
    |
    {}
}

void MethodDeclaration() #void : {}
{
    (<PUBLIC>
    (MethodName() (<LFTBRCKT> [Parameter() (<COMMA> Parameter())*] <RGHTBRCKT> | "()" )  <LFTCRLBRCKT> (MethodBody() (<RETURN> Expression()) #Return <SEMICOLON>)#MethodBody <RGHTCRLBRCKT>
    | ((<STATIC> <VOID> <MAIN> <LFTBRCKT> <STRING> (<LFTSQRBRCKT> <RGHTSQRBRCKT> | "[]") Identifier() <RGHTBRCKT> ) #Main <LFTCRLBRCKT> MethodBody() #MethodBody <RGHTCRLBRCKT>  ))
    )#Method //TODO: check if newly added production is correct

}

void MethodName() #void : {}
{
    (Type() Identifier()) #MethodName
}


void Parameter() #void : {}
{
    (Type() Identifier()) #Parameter
}


void NonIdentifierStatement() #void : {}

{
    <LFTCRLBRCKT> (Statement())* <RGHTCRLBRCKT>
    | (<IF>  <LFTBRCKT> Expression()  <RGHTBRCKT> Statement() <ELSE> Statement() ) #If
    | (WhileStatement()) #While
    | NonIdentifierExpression() <SEMICOLON>
}

void Statement() #void : {}
{
     NonIdentifierStatement()
    |
     IdentifierStatement()
}

void IdentifierStatement() #void : {Token t;}
{
    Identifier() IdentifierStatementFragment()
}

void IdentifierStatementFragment() #void : {} {
    (
        (<EQUALS> Expression()) #AssignVar(2)
        | <LFTSQRBRCKT> Expression() #ArrayAccess(2) <RGHTSQRBRCKT>
            (<EQUALS> Expression() #AssignVarArray(2) | ComplementExpressions() )
        | ComplementExpressions()
    ) <SEMICOLON>
}


void WhileStatement() #void : {}
{
    <WHILE>
    (<LFTBRCKT> | recoverFromError(new int[]{INTEGER,
                                      TRUE,
                                      FALSE,
                                      THIS,
                                      NEW,
                                      EXCLAMATION,
                                      LFTBRCKT,
                                      IDENTIFIER
                                      }, "Got '" + getToken(1) + "', expected '('", false))// all possible tokens to start an expression

    try {
        Expression()
    }
    catch (ParseException e) {
        recoverFromError(new int[]{RGHTBRCKT}, "Invalid Expression '" + e.currentToken + "'", false); // invalid expression
    }

    (<RGHTBRCKT> | recoverFromError(new int[]{LFTCRLBRCKT,
                                      IF,
                                      WHILE,
                                      INTEGER,
                                      TRUE,
                                      FALSE,
                                      THIS,
                                      NEW,
                                      EXCLAMATION,
                                      LFTBRCKT,
                                      IDENTIFIER
                                      }, "Got '" + getToken(1) + "', expected ')'", false)) // all possible tokens to start a statement

    try {
        Statement()
    }
    catch (ParseException e) {
        recoverFromError(new int[]{RGHTCRLBRCKT}, "Invalid Statement '" + e.currentToken + "'", true); // invalid statement
    }
}

JAVACODE
void recoverFromError(int[] skipTo, String errorMsg, boolean advanceWhenFound) #RecoverFromError {

    if(nErrors <= 0) System.exit(0);
    nErrors--;

    System.out.println(errorMsg);

    Token t = getToken(1);
    String skipped = "";
    boolean found = false;
    while(!found) {
        for (int i = 0; i < skipTo.length; i++) {
            if (skipTo[i] == getToken(1).kind) {
                found = true;
                break;
            }
        }
        if(!found) {
            skipped += getToken(1).toString();
            t = getNextToken();
       }
    }

    if (advanceWhenFound) {
        skipped += getToken(1).toString();
        getNextToken();
    }

    System.out.println("Skipped '" + skipped + "'\n");
}

void MethodCall() #Method : {} {
    Identifier() (<LFTBRCKT> [ Expression() (<COMMA> Expression() )* ] <RGHTBRCKT> | "()")
}

void Type() #void : {}
{
    NonIdentifierType() | Identifier()
}

void NonIdentifierType() #void : {}
{
       (<INT>("[]" #IntArray|{}#Int))  | <BOOLEAN> #Boolean | <VOID> #Void
}

void Expression() #void:{} {
    Exp1() ExpL()
}

void NonIdentifierExpression() #void:{} {
    NonIdExp1() ExpL()
}

void ExpL() #void : {} {
    ("&&"  Exp1() ExpL()) #And(2) | {}
}

void Exp1() #void : {} {
    Exp2() Exp1L()
}

void NonIdExp1() #void : {} {
    NonIdExp2() Exp1L()
}

void Exp1L() #void : {} {
    ("<"  Exp2() Exp1L()) #LessThan(2) | {}
}

void Exp2() #void : {} {
    Exp3() Exp2L()
}

void NonIdExp2() #void : {} {
    NonIdExp3() Exp2L()
}

void Exp2L() #void : {} {
    ("-"  Exp3() Exp2L()) #Sub(2) | ("+" Exp3() Exp2L()) #Sum(2) | {}
}

void Exp3() #void : {} {
    Exp4() Exp3L()
}

void NonIdExp3() #void : {} {
    NonIdExp4() Exp3L()
}

void Exp3L() #void : {} {
    ("*" Exp4() Exp3L()) #Mul(2) | ("/" Exp4() Exp3L()) #Div(2) | {}
}

void Exp4() #void : {} {
    Exp5() Exp4L()
}

void NonIdExp4() #void : {} {
    NonIdExp5() Exp4L()
}

void Exp4L() #void : {} {
    AllExpressions() ExpL() | {}
}

void Exp5() #void : {} {
    AllTerminals()
}

void NonIdExp5() #void : {} {
    Terminals()
}

void AllTerminals() #void :{} {
    Identifier() | Terminals()
}


void AllExpressions() #void : {} {
    ArrayExpression() | ComplementExpressions()
}

void ArrayExpression() #void : {} {
   <LFTSQRBRCKT> Expression() <RGHTSQRBRCKT> #ArrayAccess(2)
}

void ComplementExpressions() #void : {} {

    <DOT>
            (
            <LENGTH> #Length(1)
            |
             MethodCall() #MethodCall(2)
    )
}

void Terminals() # void : { Token t; } {
    t=<INTEGER>{ jjtThis.number = Integer.parseInt(t.image); } #Numeric
    | <TRUE> { jjtThis.number = 1; } #Numeric
    | <FALSE> { jjtThis.number = 0; } #Numeric
    | <THIS> #This
    | <NEW> (
              (Identifier() ("()" | <LFTBRCKT> <RGHTBRCKT> )) #New
             |
              (<INT> <LFTSQRBRCKT> Expression() <RGHTSQRBRCKT>) #NewArray
             )
    | "!" #Negation Expression()
    | <LFTBRCKT> Expression() <RGHTBRCKT>
}